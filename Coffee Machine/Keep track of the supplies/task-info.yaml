type: edu
custom_name: stage5
files:
- name: src/machine/Main.kt
  visible: true
  text: |
    package machine

    fun main() {
        println("Hello, world!")
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Action.kt
  visible: true
  text: |-
    package machine

    enum class Action {
        BUY, FILL, TAKE, WRONG_ACTION
    }
  learner_created: true
- name: src/machine/Machine.kt
  visible: true
  text: |-
    package machine

    import java.util.*

    object Machine {
        private val scanner = Scanner(System.`in`)

        fun start() {
            val machine = MachineOfCoffee(400, 540, 120, 9, 550)
            Print.printMachineStatus(machine)
            println()
            println("Write action (buy, fill, take):")
            val inputAction = scanner.nextLine().trim { it <= ' ' }.uppercase(Locale.getDefault())
            var action: Action = Action.WRONG_ACTION
            try {
                action = Action.valueOf(inputAction)
            } catch (e: IllegalArgumentException) {
                println("check input")
            }
            when (action) {
                Action.BUY -> buy(machine)
                Action.FILL -> fill(machine)
                Action.TAKE -> take(machine)
                else -> {
                    // to do
                }
            }
        }

        private fun buy(machine: MachineOfCoffee) {
            println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:")
            val input = scanner.nextLine().trim { it <= ' ' }.uppercase(Locale.getDefault())
            var option = 0
            try {
                option = input.toInt()
            } catch (e: IllegalArgumentException) {
                println("enter a number")
            }
            when (option) {
                1 -> tryBuyCoffee(machine, CoffeeType.ESPRESSO)
                2 -> tryBuyCoffee(machine, CoffeeType.LATTE)
                3 -> tryBuyCoffee(machine, CoffeeType.CAPPUCCINO)
            }
        }

        private fun tryBuyCoffee(machine: MachineOfCoffee, coffeeType: CoffeeType) {
            val wanted = 1
            if (machine.canMakeCoffee(coffeeType, wanted)) {
                buyCoffee(machine, coffeeType)
                Print.printMachineStatus(machine)
            }
        }

        private fun buyCoffee(machine: MachineOfCoffee, coffeeType: CoffeeType) {
            machine.waterV = machine.waterV - 1 * coffeeType.waterV
            machine.milkV = machine.milkV - 1 * coffeeType.milkV
            machine.coffeeM = machine.coffeeM - 1 * coffeeType.coffeeM
            machine.disposableCups = machine.disposableCups - 1
            machine.storedMoney = machine.storedMoney + 1 * coffeeType.cost
        }


        private fun fill(machine: MachineOfCoffee) {
            println("Write how many ml of water you want to add:")
            var waterV = 0
            var milkV = 0
            var coffeeM = 0
            var cups = 0
            try {
                waterV = scanner.nextLine().trim { it <= ' ' }.toInt()
                println("Write how many ml of milk you want to add:")
                milkV = scanner.nextLine().trim { it <= ' ' }.toInt()
                println("Write how many grams of coffee beans you want to add:")
                coffeeM = scanner.nextLine().trim { it <= ' ' }.toInt()
                println("Write how many disposable cups of coffee you want to add:")
                cups = scanner.nextLine().trim { it <= ' ' }.toInt()
            } catch (e: IllegalArgumentException) {
                println("enter a valid value")
            }
            machine.waterV += waterV
            machine.milkV += milkV
            machine.coffeeM += coffeeM
            machine.disposableCups += cups
            Print.printMachineStatus(machine)
        }

        private fun take(machine: MachineOfCoffee) {
            if (machine.storedMoney > 0) {
                println("I gave you $" + machine.storedMoney)
                machine.storedMoney = 0
                Print.printMachineStatus(machine)
            }
        }
    }
  learner_created: true
- name: src/machine/MachineOfCoffee.kt
  visible: true
  text: |-
    package machine

    class MachineOfCoffee internal constructor(
        waterV: Int, milkV: Int, coffeeM: Int, disposableCups: Int, storedMoney: Int
    ) {
        var milkV = 0
        var waterV = 0
        var coffeeM = 0
        var disposableCups = 0
        var storedMoney = 0

        init {
            this.waterV = waterV
            this.milkV = milkV
            this.coffeeM = coffeeM
            this.disposableCups = disposableCups
            this.storedMoney = storedMoney
        }

        fun canMakeCoffee(coffeeType: CoffeeType, wantedCups: Int): Boolean {
            var canMakeCoffee = true
            var cupsAvailable: Int
            cupsAvailable = waterV / coffeeType.waterV
            if (coffeeType !== CoffeeType.ESPRESSO) {
                cupsAvailable = cupsAvailable.coerceAtMost(milkV / coffeeType.milkV)
            }
            cupsAvailable = cupsAvailable.coerceAtMost(coffeeM / coffeeType.coffeeM)

            if (cupsAvailable < wantedCups) {
                canMakeCoffee = false
            }
            return canMakeCoffee
        }
    }
  learner_created: true
- name: src/machine/Print.kt
  visible: true
  text: |-
    package machine

    object Print {
        fun printMachineStatus(machine: MachineOfCoffee) {
            println()
            println("The coffee machine has:")
            println(machine.waterV.toString() + " ml of water")
            println(machine.milkV.toString() + " ml of milk")
            println(machine.coffeeM.toString() + " g of coffee beans")
            println(machine.disposableCups.toString() + " disposable cups")
            println("$" + machine.storedMoney + " of money")
        }
    }
  learner_created: true
- name: src/machine/CoffeeType.kt
  visible: true
  text: |-
    package machine

    enum class CoffeeType(var waterV: Int, var milkV: Int, var coffeeM: Int, var cost: Int) {
        ESPRESSO(250, 0, 16, 4), LATTE(350, 75, 20, 7), CAPPUCCINO(200, 100, 12, 6),
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/364/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 03 Jun 2022 20:34:18 UTC
record: -1
